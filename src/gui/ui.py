#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 6.2
#  in conjunction with Tcl version 8.6
#    Sep 14, 2021 05:08:32 PM JST  platform: Windows NT

import sys

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

from gui import ui_support


w = None


def create_MainForm(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_MainForm(root, *args, **kwargs)' .'''
    global w, w_win, root
    # rt = root
    root = rt
    w = tk.Toplevel(root)
    ui_support.set_Tk_var()
    top = MainForm(w)
    ui_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_MainForm():
    global w
    w.destroy()
    w = None


class MainForm:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("487x488+726+296")
        top.minsize(120, 1)
        top.maxsize(5524, 1131)
        top.resizable(1, 1)
        top.title("Form1")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.menubar = tk.Menu(top, font="TkMenuFont", bg=_bgcolor, fg=_fgcolor)
        top.configure(menu=self.menubar)

        self.IP = tk.Text(top)
        self.IP.place(relx=0.021, rely=0.02, relheight=0.045, relwidth=0.801)
        self.IP.configure(background="white")
        self.IP.configure(font="TkTextFont")
        self.IP.configure(foreground="black")
        self.IP.configure(highlightbackground="#d9d9d9")
        self.IP.configure(highlightcolor="black")
        self.IP.configure(insertbackground="black")
        self.IP.configure(selectbackground="blue")
        self.IP.configure(selectforeground="white")
        self.IP.configure(undo="1")
        self.tooltip_font = "TkDefaultFont"
        self.IP_tooltip = \
            ToolTip(self.IP, self.tooltip_font, '''Server Address''')

        self.Auto_Send = tk.Checkbutton(top)
        self.Auto_Send.place(relx=0.012, rely=0.082, relheight=0.041
                             , relwidth=0.565)
        self.Auto_Send.configure(activebackground="#ececec")
        self.Auto_Send.configure(activeforeground="#000000")
        self.Auto_Send.configure(background="#d9d9d9")
        self.Auto_Send.configure(cursor="hand2")
        self.Auto_Send.configure(disabledforeground="#a3a3a3")
        self.Auto_Send.configure(foreground="#000000")
        self.Auto_Send.configure(highlightbackground="#d9d9d9")
        self.Auto_Send.configure(highlightcolor="black")
        self.Auto_Send.configure(justify='left')
        self.Auto_Send.configure(text='''Auto send messages when connected to server''')
        self.Auto_Send.configure(variable=ui_support.auto_send_checked)

        self.Auto_Clear_Log = tk.Checkbutton(top)
        self.Auto_Clear_Log.place(relx=0.008, rely=0.123, relheight=0.041
                                  , relwidth=0.4)
        self.Auto_Clear_Log.configure(activebackground="#ececec")
        self.Auto_Clear_Log.configure(activeforeground="#000000")
        self.Auto_Clear_Log.configure(background="#d9d9d9")
        self.Auto_Clear_Log.configure(cursor="hand2")
        self.Auto_Clear_Log.configure(disabledforeground="#a3a3a3")
        self.Auto_Clear_Log.configure(foreground="#000000")
        self.Auto_Clear_Log.configure(highlightbackground="#d9d9d9")
        self.Auto_Clear_Log.configure(highlightcolor="black")
        self.Auto_Clear_Log.configure(justify='left')
        self.Auto_Clear_Log.configure(text='''Auto clear log next connection''')
        self.Auto_Clear_Log.configure(variable=ui_support.auto_clear_checked)

        self.Progress = ttk.Progressbar(top)
        self.Progress.place(relx=0.0, rely=0.963, relwidth=1.0, relheight=0.0
                            , height=24)
        self.Progress.configure(length="481")

        self.Status = tk.Label(top)
        self.Status.place(relx=0.021, rely=0.922, height=14, width=500)
        self.Status.configure(activebackground="#f9f9f9")
        self.Status.configure(activeforeground="black")
        self.Status.configure(anchor='w')
        self.Status.configure(background="#d8d8d8")
        self.Status.configure(disabledforeground="#a3a3a3")
        self.Status.configure(foreground="#000000")
        self.Status.configure(highlightbackground="#d9d9d9")
        self.Status.configure(highlightcolor="black")
        self.Status.configure(justify='left')
        self.Status.configure(text='''Status: Disconnected | ↑ 0 b/s | ↓ 0 b/s''')

        self.Send_Encoding = ttk.Combobox(top)
        self.Send_Encoding.place(relx=0.626, rely=0.082, relheight=0.049
                                 , relwidth=0.359)
        self.value_list = ['<Put', 'the', 'same', 'encoding', 'items>', ]
        self.Send_Encoding.configure(values=self.value_list)
        self.Send_Encoding.configure(exportselection="0")
        self.Send_Encoding.configure(textvariable=ui_support.send_encoding)
        self.Send_Encoding.configure(takefocus="")
        self.Send_Encoding.configure(cursor="hand2")

        self.Receive_Encoding = ttk.Combobox(top)
        self.Receive_Encoding.place(relx=0.626, rely=0.143, relheight=0.049
                                    , relwidth=0.359)
        self.value_list = ['<Put', 'the', 'same', 'encoding', 'items>', ]
        self.Receive_Encoding.configure(values=self.value_list)
        self.Receive_Encoding.configure(exportselection="0")
        self.Receive_Encoding.configure(textvariable=ui_support.receive_encoding)
        self.Receive_Encoding.configure(takefocus="")
        self.Receive_Encoding.configure(cursor="hand2")

        self.Send_One = tk.Checkbutton(top)
        self.Send_One.place(relx=0.014, rely=0.164, relheight=0.041
                            , relwidth=0.298)
        self.Send_One.configure(activebackground="#ececec")
        self.Send_One.configure(activeforeground="#000000")
        self.Send_One.configure(background="#d9d9d9")
        self.Send_One.configure(cursor="hand2")
        self.Send_One.configure(disabledforeground="#a3a3a3")
        self.Send_One.configure(foreground="#000000")
        self.Send_One.configure(highlightbackground="#d9d9d9")
        self.Send_One.configure(highlightcolor="black")
        self.Send_One.configure(justify='left')
        self.Send_One.configure(text='''Send one line at a time''')
        self.Send_One.configure(variable=ui_support.send_one_line_checked)

        self.S1 = ttk.Separator(top)
        self.S1.place(relx=0.021, rely=0.221, relwidth=0.965)

        self.Send = tk.Button(top)
        self.Send.place(relx=0.226, rely=0.246, height=22, width=92)
        self.Send.configure(activebackground="#ececec")
        self.Send.configure(activeforeground="#000000")
        self.Send.configure(background="#d9d9d9")
        self.Send.configure(disabledforeground="#a3a3a3")
        self.Send.configure(foreground="#000000")
        self.Send.configure(highlightbackground="#d9d9d9")
        self.Send.configure(highlightcolor="black")
        self.Send.configure(pady="0")
        self.Send.configure(state='disabled')
        self.Send.configure(text='''Send''')

        self.Action = tk.Button(top)
        self.Action.place(relx=0.021, rely=0.246, height=22, width=92)
        self.Action.configure(activebackground="#ececec")
        self.Action.configure(activeforeground="#000000")
        self.Action.configure(background="#d9d9d9")
        self.Action.configure(cursor="hand2")
        self.Action.configure(disabledforeground="#a3a3a3")
        self.Action.configure(foreground="#000000")
        self.Action.configure(highlightbackground="#d9d9d9")
        self.Action.configure(highlightcolor="black")
        self.Action.configure(pady="0")
        self.Action.configure(text='''Connect''')

        self.Clear_In = tk.Button(top)
        self.Clear_In.place(relx=0.431, rely=0.246, height=22, width=92)
        self.Clear_In.configure(activebackground="#ececec")
        self.Clear_In.configure(activeforeground="#000000")
        self.Clear_In.configure(background="#d9d9d9")
        self.Clear_In.configure(cursor="hand2")
        self.Clear_In.configure(disabledforeground="#a3a3a3")
        self.Clear_In.configure(foreground="#000000")
        self.Clear_In.configure(highlightbackground="#d9d9d9")
        self.Clear_In.configure(highlightcolor="black")
        self.Clear_In.configure(pady="0")
        self.Clear_In.configure(text='''Clear Input''')

        self.Clear_Logs = tk.Button(top)
        self.Clear_Logs.place(relx=0.637, rely=0.246, height=22, width=92)
        self.Clear_Logs.configure(activebackground="#ececec")
        self.Clear_Logs.configure(activeforeground="#000000")
        self.Clear_Logs.configure(background="#d9d9d9")
        self.Clear_Logs.configure(cursor="hand2")
        self.Clear_Logs.configure(disabledforeground="#a3a3a3")
        self.Clear_Logs.configure(foreground="#000000")
        self.Clear_Logs.configure(highlightbackground="#d9d9d9")
        self.Clear_Logs.configure(highlightcolor="black")
        self.Clear_Logs.configure(pady="0")
        self.Clear_Logs.configure(text='''Clear Logs''')

        self.Buffer = tk.Spinbox(top, from_=-1.0, to=2147483647.0)
        self.Buffer.place(relx=0.842, rely=0.246, relheight=0.045
                          , relwidth=0.144)
        self.Buffer.configure(activebackground="#f9f9f9")
        self.Buffer.configure(background="white")
        self.Buffer.configure(buttonbackground="#d9d9d9")
        self.Buffer.configure(disabledforeground="#a3a3a3")
        self.Buffer.configure(font="TkDefaultFont")
        self.Buffer.configure(foreground="black")
        self.Buffer.configure(highlightbackground="black")
        self.Buffer.configure(highlightcolor="black")
        self.Buffer.configure(insertbackground="black")
        self.Buffer.configure(selectbackground="blue")
        self.Buffer.configure(selectforeground="white")
        self.Buffer.configure(textvariable=ui_support.buffer_size)

        self.Port = tk.Spinbox(top, from_=1.0, to=65535.0)
        self.Port.place(relx=0.842, rely=0.02, relheight=0.045, relwidth=0.146)
        self.Port.configure(activebackground="#f9f9f9")
        self.Port.configure(background="white")
        self.Port.configure(buttonbackground="#d9d9d9")
        self.Port.configure(disabledforeground="#a3a3a3")
        self.Port.configure(font="TkDefaultFont")
        self.Port.configure(foreground="black")
        self.Port.configure(highlightbackground="black")
        self.Port.configure(highlightcolor="black")
        self.Port.configure(insertbackground="black")
        self.Port.configure(selectbackground="blue")
        self.Port.configure(selectforeground="white")
        self.Port.configure(textvariable=ui_support.port_num)

        self.S2 = ttk.Separator(top)
        self.S2.place(relx=0.021, rely=0.311, relwidth=0.965)

        self.Input_Guide = tk.Label(top)
        self.Input_Guide.place(relx=0.018, rely=0.328, height=11, width=44)
        self.Input_Guide.configure(activebackground="#f9f9f9")
        self.Input_Guide.configure(activeforeground="black")
        self.Input_Guide.configure(anchor='w')
        self.Input_Guide.configure(background="#d9d9d9")
        self.Input_Guide.configure(disabledforeground="#a3a3a3")
        self.Input_Guide.configure(foreground="#000000")
        self.Input_Guide.configure(highlightbackground="#d9d9d9")
        self.Input_Guide.configure(highlightcolor="black")
        self.Input_Guide.configure(text='''Input''')

        self.Input = ScrolledText(top)
        self.Input.place(relx=0.021, rely=0.348, relheight=0.158, relwidth=0.965)

        self.Input.configure(background="white")
        self.Input.configure(font="TkTextFont")
        self.Input.configure(foreground="black")
        self.Input.configure(highlightbackground="#d9d9d9")
        self.Input.configure(highlightcolor="black")
        self.Input.configure(insertbackground="black")
        self.Input.configure(insertborderwidth="3")
        self.Input.configure(selectbackground="blue")
        self.Input.configure(selectforeground="white")
        self.Input.configure(wrap="none")

        self.Packet_log = ScrolledListBox(top)
        self.Packet_log.place(relx=0.021, rely=0.553, relheight=0.35
                              , relwidth=0.965)
        self.Packet_log.configure(background="white")
        self.Packet_log.configure(cursor="xterm")
        self.Packet_log.configure(disabledforeground="#a3a3a3")
        self.Packet_log.configure(font="TkFixedFont")
        self.Packet_log.configure(foreground="black")
        self.Packet_log.configure(highlightbackground="#d9d9d9")
        self.Packet_log.configure(highlightcolor="#d9d9d9")
        self.Packet_log.configure(selectbackground="blue")
        self.Packet_log.configure(selectforeground="white")

        self.Log_Guide = tk.Label(top)
        self.Log_Guide.place(relx=0.016, rely=0.512, height=21, width=104)
        self.Log_Guide.configure(activebackground="#f9f9f9")
        self.Log_Guide.configure(activeforeground="black")
        self.Log_Guide.configure(anchor='w')
        self.Log_Guide.configure(background="#d9d9d9")
        self.Log_Guide.configure(disabledforeground="#a3a3a3")
        self.Log_Guide.configure(foreground="#000000")
        self.Log_Guide.configure(highlightbackground="#d9d9d9")
        self.Log_Guide.configure(highlightcolor="black")
        self.Log_Guide.configure(text='''Packet Log''')


# ======================================================
# Support code for Balloon Help (also called tooltips).
# Found the original code at:
# http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
# Modified by Rozen to remove Tkinter import statements and to receive
# the font as an argument.
# ======================================================

from time import time, localtime, strftime


class ToolTip(tk.Toplevel):
    """
    Provides a ToolTip widget for Tkinter.
    To apply a ToolTip to any Tkinter widget, simply pass the widget to the
    ToolTip constructor
    """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        """
        Initialize the ToolTip

        Arguments:
          wdgt: The widget this ToolTip is assigned to
          tooltip_font: Font to be used
          msg:  A static string message assigned to the ToolTip
          msgFunc: A function that retrieves a string to use as the ToolTip text
          delay:   The delay in seconds before the ToolTip appears(may be float)
          follow:  If True, the ToolTip follows motion, otherwise hides
        """
        self.wdgt = wdgt
        # The parent of the ToolTip is the parent of the ToolTips widget
        self.parent = self.wdgt.master
        # Initalise the Toplevel
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        # Hide initially
        self.withdraw()
        # The ToolTip Toplevel should have no frame or title bar
        self.overrideredirect(True)

        # The msgVar will contain the text displayed by the ToolTip
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        # The text of the ToolTip is displayed in a Message widget
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD',
                   font=tooltip_font,
                   aspect=1000).grid()

        # Add bindings to the widget.  This will NOT override
        # bindings that the widget already has
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        """
        Spawn the ToolTip.  This simply makes the ToolTip eligible for display.
        Usually this is caused by entering the widget

        Arguments:
          event: The event that called this funciton
        """
        self.visible = 1
        # The after function takes a time argument in milliseconds
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        """
        Displays the ToolTip if the time delay has been long enough
        """
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        """
        Processes motion within the widget.
        Arguments:
          event: The event that called this function
        """
        self.lastMotion = time()
        # If the follow flag is not set, motion within the
        # widget will make the ToolTip disappear
        #
        if self.follow is False:
            self.withdraw()
            self.visible = 1

        # Offset the ToolTip 10x10 pixes southwest of the pointer
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            # Try to call the message function.  Will not change
            # the message if the message function is None or
            # the message function fails
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        """
        Hides the ToolTip.  Usually this is caused by leaving the widget
        Arguments:
          event: The event that called this function
        """
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        """
        Updates the Tooltip with a new message. Added by Rozen
        """
        self.msgVar.set(msg)


# ===========================================================
#                   End of Class ToolTip
# ===========================================================

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                      | tk.Place.__dict__.keys()
        else:
            methods = tk.Pack.__dict__.keys() + tk.Grid.__dict__.keys() \
                      + tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)


class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

    def size_(self):
        sz = tk.Listbox.size(self)
        return sz


import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


def vp_setup_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    ui_support.set_Tk_var()
    top = MainForm(root)
    ui_support.init(root, top)


def vp_start_gui():
    root.mainloop()
